package models;

import java.sql.Timestamp;

/**
 * Represents a financial transaction (withdrawal, deposit, etc.).
 * This class is the object model for the TRANSACTION table in the database.
 */
public class Transaction {
    private int idTransaction;
    private int idClient;
    private String type;
    private double value;
    private Timestamp transactionDate;

    /**
     * Constructor used to LOAD an existing transaction from the database (SELECT).
     * * @param idTransaction The primary key (PK) of the transaction.
     * @param idClient The ID of the customer who performed the transaction (FK).
     * @param type The Transaction Type.
     * @param value The monetary value of the transaction.
     * @param transactionDate The exact date and time the transaction occurred.
     */
    public Transaction(int idTransaction, int idClient, String type, double value, Timestamp transactionDate) {
        this.idTransaction = idTransaction;
        this.idClient = idClient;
        this.type = type;
        this.value = value;
        this.transactionDate = transactionDate;
    }

    /**
     * Constructor used to CREATE a new transaction before saving it to the DB.
     * The idTransaction and transactionDate are generated by the database.
     * * @param idClient The ID of the customer who performed the transaction (FK).
     * @param type The type of transaction (e.g. "DEPOSIT", "WITHDRAWAL").
     * @param value The value decimal of transaction.
     */
    public Transaction(int idClient, String type, double value) {
        this.idClient = idClient;
        this.type = type;
        this.value = value;
    }

    // ---------------------------------------------------------------------
    // Getters
    // ---------------------------------------------------------------------

    /**
     * Returns the primary key of the transaction.
     * @return the transaction ID.
     */
    public int getIdTransaction() {return idTransaction;}

    /**
     * Returns the customer ID associated with this transaction.
     * @return The client ID (FK).
     */
    public int getIdClient() {return idClient;}

    /**
     * Returns the transaction type (e.g. WITHDRAWAL, DEPOSIT).
     * @return A String with the transaction type.
     */
    public String getType() {return type;}

    /**
     * Returns the decimal value of the transaction.
     * @return A decimal value.
     */
    public double getValue() {return value;}

    /**
     * Returns the date and time the transaction was recorded.
     * @return A Timestamp object.
     */
    public Timestamp getTransactionDate() {return transactionDate;}

    // ---------------------------------------------------------------------
    // Setters (Mainly used after reading the DB)
    // ---------------------------------------------------------------------

    /**
     * Sets the transaction ID. Used when loading data from the DB.
     * @param idTransaction The transaction ID.
     */
    public void setIdTransaction(int idTransaction) {this.idTransaction = idTransaction;}

    /**
     * Sets the transaction date and time. Used when loading data from the database.
     * @param transactionDate The Timestamp of the transaction.
     */
    public void setTransactionDate(Timestamp transactionDate) {this.transactionDate = transactionDate;}
}
