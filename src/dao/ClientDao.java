package dao;


import models.Client;
import models.Transaction;
import util.BankRepository;

import java.math.BigDecimal;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

/**
 * Data Access Object (DAO) for the Client entity.
 * Responsible for CRUD (Create, Read, Update) operations on the CLIENT table.
 */
public class ClientDao {
    private final TransactionDao transactionDao = new TransactionDao();

    /**
     * Inserts a new customer into the Oracle database.
     * The ID (PK) is automatically generated by Oracle.
     * * @param client The Customer object to be saved.
     * @return The generated ID of the new customer.
     * @throws SQLException If the CPF already exists or there is another database error.
     */
    public boolean insertClient(Client client) {
        Connection connection = null;
        String sql = "INSERT INTO SYSTEM.CLIENT (CPF, NAME, ADDRESS, BIRTH_DATE, STATUS_ACCOUNT, BALANCE) " +
                "VALUES (?, ?, ?, TO_DATE(?, 'DD/MM/YYYY'), ?, ?)";

        try {
            connection = BankRepository.getConnection();

            try (PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                stmt.setString(1, client.getCpf());
                stmt.setString(2, client.getName());
                stmt.setString(3, client.getAddress());
                stmt.setString(4, client.getDateOfBirth());
                stmt.setInt(5, 0);
                stmt.setDouble(6, 0.0);

                if (stmt.executeUpdate() > 0) {
                    BankRepository.commitTransaction(connection);
                    return true;
                } else {
                    BankRepository.rollbackTransaction(connection);
                    return false;
                }
            }
        }  catch (SQLException e) {
            BankRepository.rollbackTransaction(connection);
            System.err.println("[ERRO DAO] - Falha ao cadastrar cliente: " + e.getMessage());
            return false;
        } finally {
            BankRepository.closeConnection(connection);
        }
    }

    /**
     * Searches for a customer by CPF in the database.
     * * @param cpf The CPF to be searched.
     * @return An Optional containing the found customer, or Optional.empty() if not found.
     */
    public Optional<Client> findClientByCpf(String cpf) throws SQLException {
        String sql = "SELECT id_client, cpf, name, address, birth_date, status_account, balance " +
                "FROM client WHERE cpf = ?";

        try (Connection connection = BankRepository.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, cpf);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    int id = rs.getInt("id_client");
                    String cpfClient = rs.getString("cpf");
                    String name = rs.getString("name");
                    String address = rs.getString("address");

                    String birthDateFormatted = null;
                    Date sqlDate = rs.getDate("birth_date");
                    if (sqlDate != null) {
                        LocalDate localDate = sqlDate.toLocalDate();
                        birthDateFormatted = localDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                    }

                    boolean statusAccount = rs.getBoolean("status_account");
                    double balance = rs.getDouble("balance");

                    Client client = new Client(name, cpfClient, birthDateFormatted, address);
                    client.setId(id);
                    client.setBalance(balance);
                    client.setAccount(statusAccount);

                    return Optional.of(client);
                }
            }
        } catch (SQLException e) {
            System.err.println("Erro ao buscar cliente: " + e.getMessage());
        }

        return Optional.empty();
    }

    // --------------------------------------------------------------------------
    // TRANSACTION LOGIC (WITHDRAWAL AND DEPOSIT)
    // --------------------------------------------------------------------------

    /**
     * Attempts to make a withdrawal. This is an atomic transaction.
     * 1. Updates the balance in the CLIENT table.
     * 2. Inserts the record into the TRANSACTION table.
     * * @param client The client making the withdrawal (to get the ID).
     * @param value The amount to be withdrawn.
     * @return true if the transaction is successful, false otherwise.
     */
    public boolean withdraw(Client client, double value) {
        Connection connection = null;
        String sql = "UPDATE client SET balance = balance - ? WHERE id_client = ?";

        try {
            connection = BankRepository.getConnection();

            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setDouble(1, value);
                stmt.setInt(2, client.getId());

                if (stmt.executeUpdate() == 0) {
                    throw new SQLException("Erro: Saldo não atualizado. Cliente não encontrado ou erro de BD.");
                }
            }

            Transaction transaction = new Transaction(client.getId(), "SAQUE", value);
            transactionDao.insertTransaction(connection, transaction);

            BankRepository.commitTransaction(connection);
            return true;
        } catch (SQLException e) {
            BankRepository.rollbackTransaction(connection);
            System.err.println("Falha na transação de saque. Desfeita: " + e.getMessage());
            return false;
        }  finally {
            BankRepository.closeConnection(connection);
        }
    }

    /**
     * Attempts to make a deposit. This is an atomic transaction.
     * * @param client The client making the deposit.
     * @param value The amount to be deposited.
     * @return true if the transaction is successful, false otherwise.
     */
    public boolean deposit(Client client, double value) {
        Connection connection = null;
        String sql = "UPDATE client SET balance = balance + ? WHERE id_client = ?";

        try {
            connection = BankRepository.getConnection();

            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setDouble(1, value);
                stmt.setInt(2, client.getId());

                if (stmt.executeUpdate() == 0) {
                    throw new SQLException("Erro: Saldo não atualizado. Cliente não encontrado ou erro de BD.");
                }
            }

            Transaction transaction = new Transaction(client.getId(), "DEPOSITO", value);
            transactionDao.insertTransaction(connection, transaction);

            BankRepository.commitTransaction(connection);
            return true;
        } catch (SQLException e) {
            BankRepository.rollbackTransaction(connection);
            System.err.println("Falha na transação de deposito. Desfeita: " + e.getMessage());
            return false;
        }  finally {
            BankRepository.closeConnection(connection);
        }
    }

    public boolean updateAccountStatus(String cpf, boolean status) {
        Connection conn = null;
        String sql = "UPDATE CLIENT SET status_account = ? WHERE cpf = ?";
        try {
            conn = BankRepository.getConnection();
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setBoolean(1, status);
                stmt.setString(2, cpf);
                if (stmt.executeUpdate() > 0) {
                    BankRepository.commitTransaction(conn);
                    return true;
                }
            }
        } catch (SQLException e) {
            BankRepository.rollbackTransaction(conn);
            System.err.println("Erro ao atualizar status da conta: " + e.getMessage());
        } finally {
            BankRepository.closeConnection(conn);
        }
        return false;
    }

    public List<Client> findAllClients() {
        List<Client> clients = new ArrayList<>();
        String sql = "SELECT id_client, cpf, name, address, birth_date, status_account, balance FROM CLIENT ORDER BY name";

        try (Connection conn = BankRepository.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String formattedDate = null;
                Date sqlDate = rs.getDate("birth_date");
                if (sqlDate != null) {
                    LocalDate localDate = sqlDate.toLocalDate();
                    formattedDate = localDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                }

                Client client = new Client(
                        rs.getString("name"),
                        rs.getString("cpf"),
                        formattedDate,
                        rs.getString("address")
                );

                client.setId(rs.getInt("id_client"));
                client.setBalance(rs.getDouble("balance"));
                client.setAccount(rs.getBoolean("status_account"));

                clients.add(client);
            }

        } catch (SQLException e) {
            System.err.println("Erro ao listar todos os clientes: " + e.getMessage());
        }

        return clients;
    }


    /**
     * Updates a customer's registration data (name, date of birth, address).
     * @param client The Client object containing the ID and new data.
     * @return true if the update is successful.
     */
    public boolean updateClientInfo(Client client) {
        Connection conn = null;
        String sql = "UPDATE CLIENT SET name = ?, birth_date = ?, address = ? WHERE cpf = ?";

        try {
            conn = BankRepository.getConnection();
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, client.getName());

                String dateStr = client.getDateOfBirth().toString().trim();
                LocalDate localDate = null;
                if (dateStr.contains(" ")) {
                    dateStr = dateStr.split(" ")[0];
                }

                try {
                    if (dateStr.contains("-")) {
                        localDate = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    } else {
                        localDate = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                    }
                } catch (Exception e) {
                    System.err.println("[AVISO] - Formato de data inválido: " + dateStr);
                }

                if (localDate != null) {
                    stmt.setDate(2, Date.valueOf(localDate));
                } else {
                    stmt.setNull(2, java.sql.Types.DATE);
                }
                    stmt.setString(3, client.getAddress());
                    stmt.setString(4, client.getCpf());

                if (stmt.executeUpdate() > 0) {
                    BankRepository.commitTransaction(conn);
                    return true;
                }
            }
        } catch (SQLException e) {
            BankRepository.rollbackTransaction(conn);
            System.err.println("Erro ao atualizar dados cadastrais do cliente: " + e.getMessage());
        } finally {
            BankRepository.closeConnection(conn);
        }
        return false;
    }
}
